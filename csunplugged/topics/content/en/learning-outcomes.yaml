no-physical-zeros-ones:
  text: Justify why there aren’t actual 0’s and 1’s zooming around inside a computer.
  curriculum-areas:
    - computational-thinking

binary-correct-representation:
  text: Argue that 0’s and 1’s are still a correct way to represent what is stored in the computer.
  curriculum-areas:
    - computational-thinking

maths-comparing-numbers:
  text: Compare numbers
  curriculum-areas:
    - numeracy

# ERROR DETECTION AND CORRRECTION LEARNING OUTCOMES

error-describe-steps-to-find-card:
  text: Describe the steps it takes to work out how to find the card that is turned over.
  curriculum-areas:
    - decomposition

error-explain-each-card-bit:
  text: Explain that each card is a bit and that the cards can represent data.
  curriculum-areas:
    - algorithmic-thinking

error-explain-chose-parity-card:
  text: Explain why they chose each extra card when setting up the parity column/row.
  curriculum-areas:
    - generalising-and-patterns

error-explain-checksum-algorithm:
  text: Explain why the checksum algorithm is so reliable.
  curriculum-areas:
    - logic

# NUMERACY LEARNING OUTCOMES

numeracy-adding-given-number:
  text: Add numbers to a given amount.
  curriculum-areas:
    - numeracy

numeracy-identify-even-odd:
  text: Identify even and odd numbers by explaining why the most right number is different to the others.
  curriculum-areas:
    - numeracy

numeracy-discuss-count-zeros-ones:
  text: Discuss why you can count up to any number by only using 0s and 1s.
  curriculum-areas:
    - numeracy

numeracy-explain-squaring:
  text: Explain how understanding how binary numbers increase supports your knowledge of place value.
  curriculum-areas:
    - numeracy

numeracy-compare-base10-base2:
  text: Compare the base value systems of base 10 (our number system)  and base 2 (binary).
  curriculum-areas:
    - numeracy

numeracy-identify-larger-number:
  text: Identify which number is larger, when comparing two numbers.
  curriculum-areas:
    - numeracy

numeracy-count-by-pointing:
  text: Count accurately by pointing at each item.
  curriculum-areas:
    - numeracy

numeracy-recognise-patterns:
  text: Recognise patterns for numbers 1 through to 8.
  curriculum-areas:
    - numeracy

numeracy-recognise-number-alphabet-order:
  text: Recognise that the alphabet is in an order and so are numbers.
  curriculum-areas:
    - numeracy

numeracy-explain-even-odd-parity-problem:
  text: Explain how knowing what odd and evens numbers are means you can solve the parity problem.
  curriculum-areas:
    - numeracy

numeracy-describe-rows-columns:
  text: Describe what are rows and what are columns.
  curriculum-areas:
    - numeracy

numeracy-discuss-changing-one-card-state:
  text: Discuss why changing one card will change the state of the row and column which it is in.
  curriculum-areas:
    - numeracy

numeracy-explain-modulo:
  text: Explain how the modulo operator works.
  curriculum-areas:
    - numeracy

numeracy-identify-modulo-everyday-life:
  text: Identify where modulo occurs in everyday life.
  curriculum-areas:
    - measurement
    - music
    - numeracy

numeracy-discuss-modulo-understanding-remainders:
  text: Discuss how knowing how modulo works, supports your understanding of remainders.
  curriculum-areas:
    - numeracy

# PROGRAMMING LEARNING OUTCOMES

programming-explain-sequencing:
  text: Explain how sequence works in programming
  curriculum-areas:
    - programming

programming-explain-output:
  text: Explain why a program gives the output that it does.
  curriculum-areas:
    - programming

programming-explain-variable-name:
  text: Explain why choosing a good name for a variable is important.
  curriculum-areas:
    - programming

programming-describe-variables:
  text: Describe how variables store values and how they are used in your program.
  curriculum-areas:
    - programming

programming-outline-variable-updates:
  text: Outline how storing values in a variable is updated because of the code you have used.
  curriculum-areas:
    - programming

programming-describe-variable-output:
  text: Describe how a variable can be displayed as an output.
  curriculum-areas:
    - programming

programming-identify-loop:
  text: Identify how and when to use a loop to repeat a set of instructions.
  curriculum-areas:
    - programming

programming-explain-join-concatenate:
  text: Explain how to concatenate (join) strings of characters together.
  curriculum-areas:
    - programming

programming-explain-asking-input-end-user:
  text: Explain what you need to consider if you are asking for an input from the end user.
  curriculum-areas:
    - programming

programming-identify-if-statement:
  text: Identify when to use an if statement to check a set of conditions.
  curriculum-areas:
    - programming

programming-demonstrate-indexing:
  text: Demonstrate how indexing to access a letter at the specified position in a string works.
  curriculum-areas:
    - programming

programming-explain-set-and-change-statement:
  text: Explain the difference between the set statement and the change statement when used to update the value of a variable.
  curriculum-areas:
    - programming

programming-describe-variable-initial-value:
  text: Describe why a variable should be set to the correct type of initial value.
  curriculum-areas:
    - programming

programming-explain-mod:
  text: Explain what the modulo operator does in your program.
  curriculum-areas:
    - programming

programming-explain-differences-if-else-if-statements:
  text: Explain the difference between an if-else statement and an if statement and how you have used them in your program.
  curriculum-areas:
    - programming

programming-describe-nested-statement:
  text: Describe how a nested statement works in relation to your program.
  curriculum-areas:
    - programming

programming-identify-list-store-data:
  text: Identify when to use a list to store a set of data.
  curriculum-areas:
    - programming
