#!/bin/bash
# Helper script for commands related to the CS Unplugged repository.
#
# Notes:
#  - Changes to template only require user to refresh browser.
#  - Changes to static files require the 'static' command to be run.
#  - Changes to Python code are detected by gunicorn and should take effect
#    on the server after a few seconds.
#
# Future plans:
#  - Start systems when a command is given (for example: 'static') when the
#    development system has not yet been started.
#  - When 'start' is run open website in default browser without creating
#    new terminal prompt.

# Constants
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Print out help information
function helpmenu {
  printf "Usage: csu [COMMAND]\n"
  printf "Replace [COMMAND] with a word from the list below.\n\n"
  printf "Script for performing tasks related to the CS Unplugged repository.\n\n"
  printf "Available commands:\n"
  printf "   build             Build or rebuild Docker images\n"
  printf "   clean             Deletes dangling Docker images\n"
  printf "   docs              Generates the documentation\n"
  printf "   end               Stop development environment\n"
  printf "   help              View help menu\n"
  printf "   logs              View logs\n"
  printf "   shell             Open shell to Django folder\n"
  printf "   start             Start development environment (this also runs\n"
  printf "                     the update command)\n"
  printf "   static            Build static files\n"
  printf "   style             Run style checks\n"
  printf "   test              Run test suite with code coverage report\n"
  printf "   test_backwards    Run test suite backwards\n"
  printf "   update            Run Django migrate and updatedata commands\n"
  printf "                     and build static files\n"
  printf "   wipe              Deletes all Docker containers and images\n"
}

# Start development environment
function start {
  printf "Creating systems...\n"
  docker-compose up -d
  printf "\n"
  # Run helper functions
  update
  # Alert user that system is ready
  printf "\n${GREEN}Systems are ready!${NC}\n"
}

# Stop development environment
function end {
  printf "Stopping systems... (takes roughly 10 to 20 seconds)\n"
  docker-compose down
}

# Run Django migrate and updatedata commands
function update {
  static

  printf "\nApply database migrations...\n"
  docker-compose run django /docker_venv/bin/python3 ./manage.py migrate

  printf "\nLoading topics content...\n"
  docker-compose run django /docker_venv/bin/python3 ./manage.py updatedata

  static_scratch
  collect_static
}

# Build Docker images
function build {
  printf "Building Docker images...\n"
  docker-compose build
}

# Build static files
function static {
  printf "Building static files...\n"
  docker-compose run nginx gulp build
}

# Build scratch static files
function static_scratch {
  printf "Building scratch images...\n"
  docker-compose run nginx gulp scratch
}

# Collecting static files
function collect_static {
  printf "\nCollecting static files..."
  docker-compose run django /docker_venv/bin/python3 ./manage.py collectstatic --no-input
}

# Run shell
function shell {
  docker-compose run django bash
}

# Run style checks
function style {
  printf "Running PEP8 style checker...\n"
  docker-compose run -w /cs-unplugged/ django /docker_venv/bin/flake8
  printf "\nRunning Python docstring checker...\n"
  docker-compose run -w /cs-unplugged/ django /docker_venv/bin/pydocstyle --count --explain
}

# Run test suite with coverage checking
function test_suite {
  printf "Running test suite...\n"
  docker-compose run django /docker_venv/bin/coverage run --rcfile=/cs-unplugged/.coveragerc ./manage.py test --pattern "test_*.py" -v 3
  docker-compose run django /docker_venv/bin/coverage report
}

# Run test suite backwards for CI testing
function test_suite_backwards {
  printf "Running test suite backwards...\n"
  if [ "$TRAVIS_PULL_REQUEST" != "false" ]
  then
    docker-compose run django /docker_venv/bin/python3 ./manage.py test --pattern "test_*.py" --reverse -v 0
  fi
}

# Generates the documentation (with warnings as errors)
function documentation {
  printf "Removing any existing documentation...\n"
  docker-compose run django rm -rf /cs-unplugged/docs/build/
  docker-compose run django mkdir /cs-unplugged/docs/build/
  printf "\nCreating documentation...\n"
  docker-compose run django /docker_venv/bin/sphinx-build -W /cs-unplugged/docs/source/ /cs-unplugged/docs/build/
}

# Delete all untagged dangling Docker images
function clean {
  docker rmi $(docker images -f "dangling=true" -q)
}

# Delete all Docker containers and images
function wipe {
  docker rm $(docker ps -a -q)
  docker rmi $(docker images -q)
}

# View logs
function logs {
  docker-compose logs
}

# If no command given
if [ $# -eq 0 ]
then
  printf "${RED}This script requires a command!${NC}\n"
  helpmenu
  exit 1
fi
# If command given
while [ ! $# -eq 0 ]
do
  case "$1" in
    build | -b)
      build
      exit
      ;;
    clean | -c)
      clean
      exit
      ;;
    docs | -d)
      documentation
      exit
      ;;
    end | -e)
      end
      exit
      ;;
    help | -h)
      helpmenu
      exit
      ;;
    logs | -l)
      logs
      exit
      ;;
    shell)
      shell
      exit
      ;;
    start | -s)
      start
      printf "Open your preferred web browser to the URL 'localhost'\n"
      exit
      ;;
    static)
      static
      static_scratch
      collect_static
      exit
      ;;
    update | -u)
      update
      exit
      ;;
    style)
      style
      exit
      ;;
    test)
      test_suite
      exit
      ;;
    test_backwards)
      test_suite_backwards
      exit
      ;;
    wipe)
      wipe
      exit
      ;;
  esac
  shift
done
# If no command triggered
printf "${RED}Unknown command!${NC}\n"
printf "Type 'csu help' for available commands.\n"
exit 1
